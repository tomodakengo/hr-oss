generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  website   String?
  industry  String?
  size      CompanySize?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users           User[]
  employees       Employee[]
  departments     Department[]
  positions       Position[]
  attendances     Attendance[]
  payrolls        Payroll[]
  leaveRequests   LeaveRequest[]
  leaveBalances   EmployeeLeaveBalance[]
  salaryTemplates SalaryTemplate[]

  @@map("companies")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  role        UserRole @default(HR_STAFF)
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  @@map("users")
}

model Employee {
  id              String           @id @default(cuid())
  employeeNumber  String           @unique
  email           String           @unique
  firstName       String
  lastName        String
  firstNameKana   String?
  lastNameKana    String?
  birthDate       DateTime?
  gender          Gender?
  phone           String?
  mobile          String?
  address         String?
  postalCode      String?
  emergencyContact String?
  emergencyPhone  String?
  hireDate        DateTime
  resignationDate DateTime?
  employmentType  EmploymentType   @default(FULL_TIME)
  status          EmployeeStatus   @default(ACTIVE)
  profileImage    String?
  bankAccount     String?
  bankBranch      String?
  bankName        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  department  Department?  @relation(fields: [departmentId], references: [id])
  departmentId String?
  position    Position?    @relation(fields: [positionId], references: [id])
  positionId  String?
  attendances    Attendance[]
  payrolls       Payroll[]
  leaveRequests  LeaveRequest[]
  leaveBalances  EmployeeLeaveBalance[]

  @@map("employees")
}

model Department {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  parent    Department? @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children  Department[] @relation("DepartmentHierarchy")
  employees Employee[]
  positions Position[]

  @@map("departments")
}

model Position {
  id          String   @id @default(cuid())
  name        String
  description String?
  level       Int?
  baseSalary  Decimal? @db.Decimal(12, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company         Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String
  department      Department      @relation(fields: [departmentId], references: [id])
  departmentId    String
  employees       Employee[]
  salaryTemplates SalaryTemplate[]

  @@map("positions")
}

model Attendance {
  id            String            @id @default(cuid())
  date          DateTime          @db.Date
  clockIn       DateTime?
  clockOut      DateTime?
  breakStart    DateTime?
  breakEnd      DateTime?
  workHours     Decimal?          @db.Decimal(4, 2)
  overtimeHours Decimal?          @db.Decimal(4, 2)
  nightHours    Decimal?          @db.Decimal(4, 2)
  holidayHours  Decimal?          @db.Decimal(4, 2)
  status        AttendanceStatus  @default(PRESENT)
  attendanceType AttendanceType   @default(WORK_DAY)
  remarks       String?
  location      String?
  ipAddress     String?
  approvedBy    String?
  approvedAt    DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  employee  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  @@unique([employeeId, date])
  @@map("attendances")
}

model LeaveRequest {
  id          String      @id @default(cuid())
  startDate   DateTime    @db.Date
  endDate     DateTime    @db.Date
  days        Decimal     @db.Decimal(3, 1)
  leaveType   LeaveType
  reason      String?
  status      LeaveStatus @default(PENDING)
  submittedAt DateTime    @default(now())
  reviewedBy  String?
  reviewedAt  DateTime?
  remarks     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String

  @@map("leave_requests")
}

model EmployeeLeaveBalance {
  id               String   @id @default(cuid())
  year             Int
  annualLeave      Decimal  @default(20) @db.Decimal(4, 1)
  usedAnnualLeave  Decimal  @default(0) @db.Decimal(4, 1)
  sickLeave        Decimal  @default(0) @db.Decimal(4, 1)
  usedSickLeave    Decimal  @default(0) @db.Decimal(4, 1)
  specialLeave     Decimal  @default(0) @db.Decimal(4, 1)
  usedSpecialLeave Decimal  @default(0) @db.Decimal(4, 1)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String

  @@unique([employeeId, year])
  @@map("employee_leave_balances")
}

model Payroll {
  id              String         @id @default(cuid())
  year            Int
  month           Int
  
  // 基本給与
  baseSalary      Decimal        @db.Decimal(12, 2)
  
  // 労働時間・手当
  workHours       Decimal        @default(0) @db.Decimal(6, 2)
  overtimeHours   Decimal        @default(0) @db.Decimal(6, 2)
  nightHours      Decimal        @default(0) @db.Decimal(6, 2)
  holidayHours    Decimal        @default(0) @db.Decimal(6, 2)
  
  // 割増賃金
  overtimePay     Decimal        @default(0) @db.Decimal(12, 2)
  nightPay        Decimal        @default(0) @db.Decimal(12, 2)
  holidayPay      Decimal        @default(0) @db.Decimal(12, 2)
  
  // 各種手当
  transportAllowance    Decimal  @default(0) @db.Decimal(10, 2)
  familyAllowance       Decimal  @default(0) @db.Decimal(10, 2)
  housingAllowance      Decimal  @default(0) @db.Decimal(10, 2)
  positionAllowance     Decimal  @default(0) @db.Decimal(10, 2)
  skillAllowance        Decimal  @default(0) @db.Decimal(10, 2)
  otherAllowances       Decimal  @default(0) @db.Decimal(10, 2)
  
  // 総支給額
  grossSalary     Decimal        @db.Decimal(12, 2)
  
  // 社会保険料
  healthInsurance       Decimal  @default(0) @db.Decimal(10, 2)
  pensionInsurance      Decimal  @default(0) @db.Decimal(10, 2)
  employmentInsurance   Decimal  @default(0) @db.Decimal(10, 2)
  longCareInsurance     Decimal  @default(0) @db.Decimal(10, 2)
  
  // 税金
  incomeTax       Decimal        @default(0) @db.Decimal(10, 2)
  residenceTax    Decimal        @default(0) @db.Decimal(10, 2)
  
  // その他控除
  otherDeductions Decimal        @default(0) @db.Decimal(10, 2)
  
  // 総控除額
  totalDeductions Decimal        @db.Decimal(12, 2)
  
  // 差引支給額
  netSalary       Decimal        @db.Decimal(12, 2)
  
  // 勤怠データ参照期間
  attendanceFrom  DateTime       @db.Date
  attendanceTo    DateTime       @db.Date
  
  status          PayrollStatus  @default(DRAFT)
  calculatedAt    DateTime?
  approvedBy      String?
  approvedAt      DateTime?
  paymentDate     DateTime?
  remarks         String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  employee        Employee       @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId      String
  company         Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String
  payrollItems    PayrollItem[]

  @@unique([employeeId, year, month])
  @@map("payrolls")
}

// 給与項目詳細（手当・控除の明細）
model PayrollItem {
  id          String          @id @default(cuid())
  name        String          // 項目名（通勤手当、住宅手当等）
  type        PayrollItemType // 支給項目か控除項目か
  amount      Decimal         @db.Decimal(10, 2)
  description String?         // 計算根拠等の詳細
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  payroll   Payroll @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  payrollId String

  @@map("payroll_items")
}

// 給与設定テンプレート
model SalaryTemplate {
  id                String   @id @default(cuid())
  name              String   // テンプレート名
  baseSalary        Decimal  @db.Decimal(12, 2)
  transportAllowance Decimal @default(0) @db.Decimal(10, 2)
  familyAllowance   Decimal  @default(0) @db.Decimal(10, 2)
  housingAllowance  Decimal  @default(0) @db.Decimal(10, 2)
  positionAllowance Decimal  @default(0) @db.Decimal(10, 2)
  skillAllowance    Decimal  @default(0) @db.Decimal(10, 2)
  
  // 時間単価設定
  hourlyRate        Decimal? @db.Decimal(8, 2) // 時間給（時給制の場合）
  overtimeRate      Decimal  @default(1.25) @db.Decimal(3, 2) // 残業割増率
  nightRate         Decimal  @default(1.25) @db.Decimal(3, 2) // 深夜割増率
  holidayRate       Decimal  @default(1.35) @db.Decimal(3, 2) // 休日割増率
  
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company           Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId         String
  position          Position? @relation(fields: [positionId], references: [id])
  positionId        String?

  @@map("salary_templates")
}

// Enums
enum UserRole {
  ADMIN
  HR_STAFF
  MANAGER
  EMPLOYEE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  RESIGNED
  TERMINATED
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EARLY_LEAVE
  VACATION
  SICK_LEAVE
  BUSINESS_TRIP
}

enum AttendanceType {
  WORK_DAY
  HOLIDAY
  PAID_LEAVE
  SICK_LEAVE
  SPECIAL_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
  COMPENSATORY_LEAVE
}

enum LeaveType {
  ANNUAL_LEAVE
  SICK_LEAVE
  SPECIAL_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
  BEREAVEMENT_LEAVE
  COMPENSATORY_LEAVE
  UNPAID_LEAVE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum PayrollStatus {
  DRAFT
  CALCULATED
  APPROVED
  PAID
}

enum PayrollItemType {
  ALLOWANCE    // 支給項目（手当等）
  DEDUCTION    // 控除項目
}
